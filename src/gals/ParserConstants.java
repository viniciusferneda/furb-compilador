package gals;

public interface ParserConstants
{
    int START_SYMBOL = 48;

    int FIRST_NON_TERMINAL    = 48;
    int FIRST_SEMANTIC_ACTION = 89;

    int[][] PARSER_TABLE =
    {
        { -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1,  9,  9, -1, -1, -1, -1, -1, -1, -1,  9, -1,  9, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        {  3, -1,  2, -1, -1, -1, -1, -1,  2, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  4, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, 11, -1, 11, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, 21, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, 14, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 17, 16, -1, -1, -1, -1, -1, -1, -1, 16, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, 27, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 33, 33, 33, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, 33, -1, -1, -1, 33, 33, 33, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, 33, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 45, -1, -1, -1, -1, -1, 45, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 46, 46, 46, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 46, -1, -1, -1, 46, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, 49, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 50, 50, 50, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, 53, -1, -1, -1, 50, 51, 50, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, 50, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 54, 54, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, 54, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, 56, 56, -1, 56, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, 55, 55, 55, 55, 55, 55 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 58, 59, 60, 61, 62 },
        { -1, -1, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, 66, 66, -1, 66, -1, -1, 66, -1, -1, 64, 65, -1, -1, -1, -1, 66, 66, 66, 66, 66, 66 },
        { -1, -1, 67, 67, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, 67, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, 72, 72, -1, 72, -1, -1, 72, -1, -1, 72, 72, 68, 69, 70, 71, 72, 72, 72, 72, 72, 72 },
        { -1, -1, 73, 74, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, 76, -1, -1, -1, 79, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, 81, 81, 82, 81, -1, -1, 81, -1, -1, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81 }
    };

    int[][] PRODUCTIONS = 
    {
        {  3, 26, 25, 49, 25, 50 },
        { 52, 51 },
        { 50 },
        {  0 },
        { 53 },
        { 55 },
        { 56 },
        { 57 },
        { 58 },
        { 59 },
        {  0 },
        { 60, 59 },
        { 18 },
        {  8 },
        { 16 },
        {  7, 29, 61, 30,  4, 28 },
        { 61 },
        { 62 },
        {  3, 65 },
        {  0 },
        { 30, 64 },
        { 63, 64, 27 },
        {  3, 54 },
        { 31, 77, 27 },
        { 29, 77, 28, 31, 77, 27 },
        { 20, 32, 68, 33, 27 },
        {  3, 67 },
        {  0 },
        { 29, 77, 28 },
        { 66, 69 },
        {  0 },
        { 30, 68 },
        { 24, 32, 70, 33, 27 },
        { 77, 71 },
        {  0 },
        { 30, 70 },
        { 32, 77, 33, 72, 27 },
        { 75 },
        { 74, 73 },
        { 75 },
        {  0 },
        { 15, 34, 50, 35 },
        { 14, 34, 50, 35 },
        {  9, 34, 76, 13, 32, 77, 33, 11, 76, 35, 10, 27 },
        {  0 },
        { 50 },
        { 79, 78 },
        { 19, 79, 78 },
        {  6, 79, 78 },
        {  0 },
        { 80 },
        { 22 },
        { 12 },
        { 17, 79 },
        { 83, 81 },
        { 82, 83 },
        {  0 },
        { 42 },
        { 43 },
        { 44 },
        { 45 },
        { 46 },
        { 47 },
        { 85, 84 },
        { 36, 85, 84 },
        { 37, 85, 84 },
        {  0 },
        { 87, 86 },
        { 38, 87, 86 },
        { 39, 87, 86 },
        { 40, 87, 86 },
        { 41, 87, 86 },
        {  0 },
        {  3, 88 },
        {  4 },
        {  5 },
        { 32, 77, 33 },
        { 23, 32, 77, 33 },
        { 21, 32, 77, 33 },
        { 36, 87 },
        { 37, 87 },
        {  0 },
        { 29, 77, 28 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado fim de programa",
        "esperado palavraReservada",
        "esperado identificador",
        "esperado constNum",
        "esperado constLit",
        "esperado and",
        "esperado array",
        "esperado character",
        "esperado do",
        "esperado endDo",
        "esperado exit",
        "esperado false",
        "esperado if",
        "esperado ifFalseDo",
        "esperado ifTrueDo",
        "esperado logical",
        "esperado not",
        "esperado number",
        "esperado or",
        "esperado read",
        "esperado round",
        "esperado true",
        "esperado trunk",
        "esperado write",
        "esperado \"|\"",
        "esperado \":\"",
        "esperado \".\"",
        "esperado \"]\"",
        "esperado \"[\"",
        "esperado \",\"",
        "esperado \":=\"",
        "esperado \"(\"",
        "esperado \")\"",
        "esperado \"{\"",
        "esperado \"}\"",
        "esperado \"+\"",
        "esperado \"-\"",
        "esperado \"*\"",
        "esperado \"/\"",
        "esperado \"\\\"",
        "esperado \"%\"",
        "esperado \"=\"",
        "esperado \"!=\"",
        "esperado \"<\"",
        "esperado \"<=\"",
        "esperado \">\"",
        "esperado \">=\"",
        "esperado identificador", //"<programa> inv�lido",
        "esperado array, character, logical, number, |", //"<variaveis> inv�lido",
        "esperado identificador, do, read, write, (", //"<listaCmd> inv�lido",
        "esperado fim do programa, identificador, do, if, read, write, (, }", //"<listaCmd2> inv�lido",
        "esperado identificador, do, read, write, (", //"<comando> inv�lido",
        "esperado identificador",//"<atribuicao> inv�lido",
        "esperado [, :=", //"<atribuicao2> inv�lido",
        "esperado read", //"<entrada> inv�lido",
        "esperado write", //"<saida> inv�lido",
        "esperado (", //"<selecao> inv�lido",
        "esperado do", //"<repeticao> inv�lido",
        "esperado array, character, logical, number, |", //"<listavar> inv�lido",
        "esperado array, character, logical, number, ", //"<varAux> inv�lido",
        "esperado character, logical, number, ", //"<tipoSimples> inv�lido",
        "esperado array", //"<array> inv�lido",
        "esperado array, character, logical, number", //"<tipo> inv�lido",
        "esperado identificador", //"<listaId> inv�lido",
        "esperado '.', ','", //"<listaId2> inv�lido",
        "esperado identificador", //"<idRead> inv�lido",
        "esperado [, ',', )", //"<idRead2> inv�lido",
        "esperado identificador", //"<listaIdRead> inv�lido",
        "esperada ',', )", //"<listaIdRead2> inv�lido",
        "esperada expreessão", //"<listaExp> inv�lido",
        "esperada expreessão", //"<listaExp2> inv�lido",
        "esperado ifFalseDo, ifTrueDo", //"<comandoSel> inv�lido",
        "esperado ifFalseDo, :", //"<comandoSel3> inv�lido",
        "esperado ifTrueDo", //"<ifTrueDo> inv�lido",
        "esperado ifFalseDo", //"<ifFalseDo> inv�lido",
        "esperado identificador, do, if, read, trunk, (, {", //"<listaCmdRep> inv�lido",
        "esperada expressão", //"<expressao> inv�lido",
        "esperada expressão",//"<expressao2> inv�lido",
        "esperada expressão",//"<valor> inv�lido",
        "esperada expressão",//"<relacional> inv�lido",
        "esperada expressão",//"<relacional2> inv�lido",
        "esperada expressão",//"<op_relacional> inv�lido",
        "esperada expressão",//"<aritmetica> inv�lido",
        "esperada expressão",//"<aritmetica2> inv�lido",
        "esperada expressão",//"<termo> inv�lido",
        "esperada expressão",//"<termo2> inv�lido",
        "esperada expressão",//"<fator> inv�lido",
        "esperada expressão",//"<fator2> inv�lido"
    };
}
